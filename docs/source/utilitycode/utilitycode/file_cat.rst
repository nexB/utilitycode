.. _file_cat:

===================================================
Categorize records in SCTK/scan2inv XLSX (file-cat)
===================================================

|div-page-outline|

.. contents:: :local:
    :depth: 7


Usage
=====

.. code-block::

    Usage: file-cat [OPTIONS] INPUT OUTPUT

      Categorize the records in the .xlsx file(s) generated by the sctk2inv or
      scio2inv utility, and identify the analysis priority based on the rules
      (file_cat_rules.csv).

      Requires seven columns in the input .xlsx: 'path', 'name', 'extension',
      'mime_type', 'file_type', 'type' and 'programming_language'. Additional
      columns and their values will be preserved and included in the output.

      The output file will be created in the user-defined OUTPUT location, using
      the input file's basename appended with "-file-cat.xlsx".

      Sample test command:

      file-cat <path to SCTK/scan2inv input .xlsx> <path to output directory>
      file-cat <path to input directory> <path to output directory>

    Options:
      --rules FILE           Path to the custom file_cat_rules.csv
      -ws, --worksheet TEXT  Define the name of the worksheet to work on.
      -h, --help             Show this message and exit.


Example
=======

.. code-block::

   file-cat <path to SCTK/scan2inv input .xlsx> <path to output directory>

   file-cat -ws RESOURCES <path to input directory> <path to output directory>

   file-cat -ws RESOURCES <path to input directory> <path to output directory> --rules <path to custom rules.csv>



Notes
=====

General
-------

``file-cat`` takes an input XLSX generated by ``sctk2inv`` or ``scio2inv``,
adds 3 categorization columns (``analysis_priority``, ``file_category`` and
``file_subcategory``) to the generated XLSX, starting at column A (these
columns are automatically included in a generated XLSX file), and outputs a
copy of that XLSX in which categorization values have been added to the 3
categorization columns.  The output XLSX will also include basic
``sctk2inv`` formatting, e.g., borders, font family and size, column header
background coloring.

- The input XLSX must include these seven columns:
  ``path``, ``name``, ``extension``, ``mime_type``,
  ``file_type``, ``type`` and ``programming_language``.

  - If the input XLSX has additional columns, the ``Resource.input_dict``
    attribute -- which stores the entire dictionary representing the XLSX
    row -- is used to include those columns and their values in the output
    XLSX.

|

**Input:**

.. list-table::
   :widths: 10 10 10 10 10 10 10 10 40 10
   :header-rows: 1
   :class: smaller-font

   * - analysis_priority
     - file_category
     - file_subcategory
     - path
     - type
     - name
     - extension
     - mime_type
     - file_type
     - programming_language
   * -
     -
     -
     - /path01/path02/archerctl
     - file
     - archerctl
     -
     - application/x-executable
     - ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically
       linked, interpreter /lib/ld-linux.so.3, for GNU/Linux 4.1.0, stripped
     -
   * -
     -
     -
     - /path01/path02/excanvas.js
     - file
     - excanvas.js
     - .js
     - text/plain
     - ASCII text, with very long lines, with no line terminators
     - JavaScript

|

**Output:**

.. list-table::
   :widths: 10 10 10 10 10 10 10 10 40 10
   :header-rows: 1
   :class: smaller-font

   * - analysis_priority
     - file_category
     - file_subcategory
     - Resource Path
     - Resource type
     - Resource Name
     - extension
     - mime_type
     - file_type
     - programming_language
   * - 1
     - binary
     - elf-exec
     - /path01/path02/archerctl
     - file
     - archerctl
     -
     - application/x-executable
     - ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically
       linked, interpreter /lib/ld-linux.so.3, for GNU/Linux 4.1.0, stripped
     -
   * - 1
     - source
     - javascript
     - /path01/path02/excanvas.js
     - file
     - excanvas.js
     - .js
     - text/plain
     - ASCII text, with very long lines, with no line terminators
     - JavaScript



The new file-cat columns
------------------------

As noted above, ``file-cat`` produces an output XLSX in which categorization
values have been added to the first 3 columns of the input XLSX
(``analysis_priority``, ``file_category`` and ``file_subcategory``).

The file-cat rules
------------------

The default file-cat rules are located at `file_cat_rules.csv
<https://github.com/nexB/utilitycode/tree/main/src/utilitycode/file_cat_rules.csv>`_

"Users can create custom rules in a .csv file and apply them using the
`--rules`` option.

The rules file required the following 8 fields:

- class
- order
- analysis_priority
- file_category
- file_subcategory
- rule_type
- rule
- condition

**class**

Name of the rule

**order**

If multiple rule conditions are met, the rule with the smaller order number
will be applied. For example, if rule A has an order number of '10' and
rule B has an order number of '0', and both conditions are met, rule B will
take precedence.

**analysis_priority**

A metric to determine the key elements to focus on during analysis. This
value helps in identifying and prioritizing the crucial aspects that need
attention, enabling more effective and targeted evaluation.

**file_category**

The primary category that describes the records defined by the rule, e.g.,
``binary``, ``source``, ``script`` or ``media``.

**file_subcategory**

If needed, identifies the subset of the ``file_category`` for the rule.

**rule_type**

Specify the types of fields to look for. If the condition involves an 'AND'
logical operator, use the 'AND' expression between field types, such as
``name AND type``.

**rule**

The rule value for the type.

*SYNTAX*

*rule_type: value*

If a rule has multiple values, separate each value with a comma.
For instance, ``extension: .c, .h``

If a rule contains a logical 'AND' operator, separate each condition with a
newline.

For instance, ``name AND type``,

*name: license*

*type: file*


If a rule contains a logical 'OR' operator, create a new row for each
condition.

**condition**

The syntax is the same as the ``rule``.

Six conditions are currently supported:

- in
- substring
- equal
- startswith
- endswith
- boolean

For instance, ``extension: in``
